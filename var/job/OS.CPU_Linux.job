/**
 * Monitoring CPU usage.<br/>
 * <p>
 * Information about the amount of time the CPU has spent performing different kinds of work.<br/>
 * </p>
 * @targetVersion Ubuntu 12.04
 * @return get informations on the use of cpu.
 * @returnParam UserSpentSec Normal processes executing in user mode
 * @returnParam NiceSpentSec Niced processes executing in user mode
 * @returnParam SystemSpentSec Processes executing in kernel mode
 * @returnParam IdleSpentSec Twiddling thumbs
 * @returnParam IowaitSpentSec Waiting for I/O to complete
 * @returnParam IrgSpentSec Servicing interrupts
 * @returnParam SoftIrqSpentSec Servicing softirqs
 * @returnParam StealSpentSec Involuntary wait
 * @returnParam GuestSpentSec Running a normal guest
 * @returnParam GuestNiceSpentSec Running a niced guest
 */

JOB = [name:"OS.CPU_Linux"]

FETCHACTION = {
	File file = new File("/proc/stat")
	def data = file.getText()
        assert data != null && data != "", "Process output is null or empty, error information: " + output.err
	def flag = true
	def tmpData
	def resultData
	def listData = []
	def headerData = ["UserSpentSec", "NiceSpentSec", "SystemSpentSec", "IdleSpentSec", "IowaitSpentSec", "IrgSpentSec", "SoftIrqSpentSec", "StealSpentSec", "GuestSpentSec", "GuestNiceSpentSec"]
	data.eachLine{line->
		if(line.contains("cpu") && flag) {
			resultData = [:]
			tmpData = line.trim().split(" ").findAll{!it.trim().equals("")}
			for(int i=0; i<headerData.size(); i++){
				if(tmpData[i+1] != null) {
					resultData[headerData[i]] = tmpData[i+1].toLong()/100
				} else {
					 resultData[headerData[i]] = 0
				}
			}
			listData.add(resultData)
			flag = false
		}
	}
	return listData
}

KEYEXPR = ['_sequence':['SystemSpentSec','UserSpentSec','IowaitSpentSec']]
KEYEXPR._unit = ["UserSpentSec":"sec", "NiceSpentSec":"sec", "SystemSpentSec":"sec", "IdleSpentSec":"sec", "IowaitSpentSec":"sec", "IrgSpentSec":"sec", "SoftIrqSpentSec":"sec", "StealSpentSec":"sec", "GuestSpentSec":"sec", "GuestNiceSpentSec":"sec"]
KEYEXPR._chart = [
	[
		"type": "line",
		"name": "Activities of CPU",
		"chart_columns": ["UserSpentSec", "NiceSpentSec", "SystemSpentSec", "IdleSpentSec", "IowaitSpentSec", "IrgSpentSec", "SoftIrqSpentSec", "StealSpentSec", "GuestSpentSec", "GuestNiceSpentSec"]
	]
]
SENDTYPE = "Store"
RESOURCEID = "Linux/CPU"
DEST = parameters.dest
OSINFO = parameters.osinfo
MONITORINGTYPE = '@OS'
