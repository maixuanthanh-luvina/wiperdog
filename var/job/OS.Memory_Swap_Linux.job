/**
 * Monitoring used memory by OS.<br/>
 * <p>
 * Provides information about distribution and utilization of memory.<br/>
 * </p>
 * @targetVersion Ubuntu 12.04
 * @return get information of free and used physical and swap memory in the system.
 * @returnParam MemTotalKB Total usable of ram.
 * @returnParam MemFreeKB The sum of LowFree+HighFree
 * @returnParam MemUsedKB The memory in use.
 * @returnParam BuffersKB The memory usage for buffers.
 * @returnParam CachedKB The memory usage for cache.
 * @returnParam SwapCachedKB Memory that once was swapped out, is swapped back in but still also is in the swapfile.
 * @returnParam ActiveKB Memory that has been used more recently and usually not reclaimed unless absolutely necessary.
 * @returnParam InactiveKB Memory which has been less recently used.
 * @returnParam SwapTotalKB Total amount of swap space available.
 * @returnParam SwapFreeKB Memory which has been evicted from RAM, and is temporarily on the disk.
 * @returnParam SwapUsedKB Total amount of swap space in use.
 * @returnParam DirtyKB Memory which is waiting to get written back to the disk.
 * @returnParam WritebackKB Memory which is actively being written back to the disk.
 * @returnParam SwapUsedPct The percentage of swap in use.
 * @returnParam MemUsedPct The percentage of memory in use.
 */
JOB = [name:"OS.Memory_Swap_Linux"]
FETCHACTION = {
	 def command = "cat /proc/meminfo"
	 def listData = []
	 //data remote
	 def outputProc = procRunner.procExecute(command,false)
	 def output = outputProc.out
	 assert output != null && output != "", "Process output is null or empty, error information: " + outputProc.err
	 def result = output.split('\n').inject([:]) { map, token ->
		// process with data not empty
		if(token != "") {
			token.split(':').with {
				if(it.size() == 2) {
					def data = it[1].replace("kB","").trim()
					map[it[0].trim()] = data.toLong()
				} else {
					map[it[0].trim()] = 0
				}
			}
			if(!listData.contains(map)) {
				listData.add(map)
			}
			map
		}
	}
	
	def tmpData
	def finalResult = []
	
	listData.each{data->
		tmpData = [:]
		data.each{key, value->
			if(key.contains("MemTotal")) {
				tmpData["MemTotalKB"] = value
			}
			if(key.contains("MemFree")) {
				tmpData["MemFreeKB"] = value
			}
			if(key.contains("Buffers")) {
				tmpData["BuffersKB"] = value
			}
			if(key.contains("Cached")) {
				tmpData["CachedKB"] = value
			}
			if(key.contains("SwapCached")) {
				tmpData["SwapCachedKB"] = value
			}
			if(key.contains("Active")) {
				tmpData["ActiveKB"] = value
			}
			if(key.contains("Inactive")) {
				tmpData["InactiveKB"] = value
			}
			if(key.contains("SwapTotal")) {
				tmpData["SwapTotalKB"] = value
			}
			if(key.contains("SwapFree")) {
				tmpData["SwapFreeKB"] = value
			}
			if(key.contains("Dirty")) {
				tmpData["DirtyKB"] = value
			}
			if(key.contains("Writeback")) {
				tmpData["WritebackKB"] = value
			}
		}
		tmpData["MemUsedKB"] = tmpData["MemTotalKB"] - tmpData["MemFreeKB"]
		tmpData["MemUsedPct"] =  (tmpData["MemTotalKB"] != 0)?(tmpData["MemUsedKB"]/tmpData["MemTotalKB"])*100 : 0
		tmpData["SwapUsedKB"] = tmpData["SwapTotalKB"] - tmpData["SwapFreeKB"]
		tmpData["SwapUsedPct"] =  (tmpData["SwapTotalKB"] != 0)?(tmpData["SwapUsedKB"]/tmpData["SwapTotalKB"])*100 : 0
		finalResult.add(tmpData)
	}
 return finalResult
}

KEYEXPR = [_sequence:["MemUsedKB","MemFreeKB","MemUsedPct"]]
KEYEXPR._unit = ["MemTotalKB":"KB", "MemFreeKB":"KB", "MemUsedKB":"KB", "BuffersKB":"KB", "CachedKB":"KB", "SwapCachedKB":"KB", "ActiveKB":"KB", "InactiveKB":"KB", "SwapTotalKB":"KB", "SwapFreeKB":"KB", "SwapUsedKB":"KB", "DirtyKB":"KB", "WritebackKB":"KB", "SwapUsedPct":"%", "MemUsedPct":"%"]
KEYEXPR._chart = [
	[
		"type": "pie",
		"name": "Memory Usage Linux ",
		"chart_columns": ["MemUsedKB","MemFreeKB"]
	],
	[
		"type": "pie",
		"name": "Swap Usage Linux ",
		"chart_columns": ["SwapUsedKB","SwapFreeKB"]
	],
	[
		"type": "line",
		"name": "Memory Usage Linux - Used percentage",
		"chart_columns": ["MemUsedPct"]
	],
	[
		"type": "line",
		"name": "Swap Usage Linux - Used percentage",
		"chart_columns": ["SwapUsedPct"]
	]
]
SENDTYPE = "Store"
RESOURCEID = "Linux/MemoryUsage"
DEST = parameters.dest
OSINFO = parameters.osinfo
MONITORINGTYPE = '@OS'
