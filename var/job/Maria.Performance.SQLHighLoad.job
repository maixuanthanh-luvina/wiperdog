/**
 * Monitoring slow query and current process  at time of monitoring
 * <p>
 *     Monitoring slow query and current process  at time of monitoring
 * </p> 
 * @targetVersion 10
 * @return  Information of slow query and current running process at the time of monitoring
 * @returnParam SessionId  Session Identification.	
 * @returnParam UserNm MariaDB User.
 * @returnParam HostNm Connecting host.	
 * @returnParam DatabaseNm Default database, or NULL if none.	
 * @returnParam StatusStr
 * @returnParam GetFromStr
 * @returnParam StartAt
 * @returnParam QueryTimeLong
 * @returnParam WaitTimeLong
 * @returnParam EndAt
 * @returnParam RowsCnt
 * @returnParam RowsTotalCnt
 */
JOB = [name:"Maria.Performance.SQLHighLoad"]
FETCHACTION= {
println "------------------------------------------------------------------------------"
	// STEP 1: get list detail of query that executed from table slow_log
	def limitParam = parameters.limit != null ? parameters.limit : 0
	def limit = 0
	
	def sha_converter = { string->
	    String password = string
	    java.security.MessageDigest sha1 = java.security.MessageDigest.getInstance("SHA1");
	    byte[] digest  = sha1.digest(password.getBytes());
	    return(new  BigInteger(1, digest).toString(32));
	}
	if (limitParam instanceof String) {
		try {
			limit = Integer.parseInt(limitParam)
		}catch(Exception e){
			limit = 0
		}
	} else if(limitParam instanceof Integer && limitParam > 0) {
		limit = limitParam
	}
	def listSlowLogData = []
	println ":::::::::::::::::: LAST EXEC " + lastexecution
	if (lastexecution != null) {
		def sqlSlowLog = """
			#PIEX MySQL SQLHighLoad
			SELECT
	  			t1.sql_text as SqlTxt,
				SUBSTRING_INDEX(t1.user_host,'[',1) AS UserNm,
				SUBSTRING_INDEX(t1.user_host,'@',-1) AS HostNm,
				t1.db AS DatabaseNm,
	  			time_to_sec(t1.query_time) AS QueryTimeLong,
	  			DATE_SUB(t1.start_time, INTERVAL TIME_TO_SEC(t1.query_time) SECOND)  AS StartAt,  			
	  			time_to_sec(t1.lock_time) AS WaitTimeLong,
	  			t1.rows_sent AS RowsCnt,
	  			t1.rows_examined AS RowsTotalCnt,
				t1.start_time AS EndAt
			FROM mysql.slow_log t1 
			WHERE  t1.sql_text NOT LIKE '%#PIEX MySQL SQLHighLoad%' AND t1.start_time > from_unixtime(${lastexecution}) ORDER BY t1.query_time desc
			"""
		
		listSlowLogData = sql.rows(sqlSlowLog)
		//STEP 2: set session_id, StatusStr
		listSlowLogData.each {
			it['SessionId'] = null
			it['StatusStr'] = "finish"
		}
	}	
	//STEP 3: get query which is executing from table processlist
	def sqlProcessList = """
		#PIEX MySQL SQLHighLoad
		SELECT
			A.info AS SqlTxt,
			A.id AS SessionId,	
			A.user AS UserNm,
			A.host As HostNm,
			A.db AS DatabaseNm,
			A.state AS StatusStr,
			A.time_ms AS QueryTimeLong,
			case
	  			when A.command='query' and A.state like '%lock%' then A.time_ms
			else 0
			end WaitTimeLong,
			DATE_SUB(now(), INTERVAL A.time_ms MICROSECOND)
			As StartAt			
		FROM information_schema.processlist A 
		WHERE A.info IS NOT null AND A.info != '' AND A.command = 'query' AND A.time_ms > 0 AND A.info not like '%#PIEX MySQL SQLHighLoad%'
		"""
	def listProcessListData = [:]
	try{
	    listProcessListData = sql.rows(sqlProcessList)
	}catch(Exception ex){println ex}	
	// STEP 4: set data EndAt, rows, RowsTotalCnt
	listProcessListData.each {		
		it['RowsCnt'] = null
		it['RowsTotalCnt'] = null
		it['EndAt'] = null
	}

	//STEP 5: add listProcessListData into listSlowLogData
	if(listProcessListData != null && listProcessListData.size() > 0 )
		listSlowLogData.addAll(listProcessListData)
	
	//STEP 6: analyze listSlowLogData 
	def listResultData = []
	boolean isExisted
	
	listSlowLogData.each {slowLogData->
		/*def checkData = it*/
		isExisted = false		
		/**
			If the sql statement exist in resultData then:
				1. Increase QueryTimeLong 
				2. Update DetailExecutions to new one (in listResultData)
		*/
		listResultData.each {
			if (it['SqlTxt'].equals(slowLogData['SqlTxt'])) { 
				isExisted = true
				
				//-- Increase query time
				it['QueryCnt'] = it['QueryCnt'] + 1
				
				//-- Metris info
				if (it['LastStartAt'] < slowLogData['StartAt'].toString()) {
					it['LastStartAt'] = slowLogData['StartAt'].toString()
					it['LastExecuteTimeLong'] = slowLogData['QueryTimeLong']
				}
				//-- Plan infor
				//-- No need to update
				//- Detail execution
				def tempMapExecuteDetail = [:]				
				tempMapExecuteDetail['StartAt'] = slowLogData['StartAt'].toString()
				tempMapExecuteDetail['WaitTimeLong'] = slowLogData['WaitTimeLong']
				tempMapExecuteDetail['EndAt'] = slowLogData['EndAt'].toString()
				tempMapExecuteDetail['StatusStr'] = slowLogData['StatusStr']
				tempMapExecuteDetail['SessionId'] = slowLogData['SessionId']
				tempMapExecuteDetail['UserNm'] = slowLogData['UserNm']
				tempMapExecuteDetail['HostNm'] = slowLogData['HostNm']
				if (tempMapExecuteDetail['StatusStr'] == 'finish') {
					tempMapExecuteDetail['GetFromStr'] = 'mysql.slow_log'
				} else {
					tempMapExecuteDetail['GetFromStr'] = 'information_schema.processlist'
				}
				if (slowLogData['DatabaseNm'] == null || slowLogData['DatabaseNm'] == '') {
					tempMapExecuteDetail['DatabaseNm'] = 'null'
				} else {
					tempMapExecuteDetail['DatabaseNm'] = slowLogData['DatabaseNm']
				}
				tempMapExecuteDetail['RowsCnt'] = slowLogData['RowsCnt']
				if (tempMapExecuteDetail['StatusStr'] == 'finish') {
					tempMapExecuteDetail['RowsTotalCnt'] = slowLogData['RowsTotalCnt']
				} else {
					tempMapExecuteDetail['RowsTotalCnt'] = null
				}
				tempMapExecuteDetail['QueryTimeLong'] = slowLogData['QueryTimeLong']
				it['DetailExecutions'].add(tempMapExecuteDetail)
				
			}
		}//-- END FOR EACH - listResultData.each 
		
		/* ADD NEW
			If resultData is newly created or sql statement does not exist in resultDataList
			then do the followings:
			 - Add current slowLogData to resultData
		*/
		if (listResultData.size() == 0 || !isExisted) { 
				def tmpMapDataResult = [:]
				tmpMapDataResult['StatisticsGatheredBool'] = "false"	
				tmpMapDataResult['SqlTxt'] = slowLogData['SqlTxt']
				tmpMapDataResult['SqlHash'] = sha_converter(slowLogData['SqlTxt'])
				
				//-- SQL Metrics
				tmpMapDataResult['QueryCnt'] = 1
				tmpMapDataResult['LastExecuteTimeLong'] = slowLogData['QueryTimeLong']
				tmpMapDataResult['LastStartAt'] = slowLogData['StartAt'].toString()
				
				//-- Detail execution
				tmpMapDataResult['DetailExecutions'] = []
					
				def tempMapExecuteDetail = [:]
				tempMapExecuteDetail['SessionId'] = slowLogData['SessionId']
				tempMapExecuteDetail['UserNm'] = slowLogData['UserNm']
				tempMapExecuteDetail['HostNm'] = slowLogData['HostNm']
				
				if (slowLogData['DatabaseNm'] == null || slowLogData['DatabaseNm'] == '') {
					tempMapExecuteDetail['DatabaseNm'] = 'null'
				} else {
					tempMapExecuteDetail['DatabaseNm'] = slowLogData['DatabaseNm']
				}
				tempMapExecuteDetail['StatusStr'] = slowLogData['StatusStr']
				if (tempMapExecuteDetail['StatusStr'] == 'finish') {
					tempMapExecuteDetail['GetFromStr'] = 'mysql.slow_log'
				} else {
					tempMapExecuteDetail['GetFromStr'] = 'information_schema.processlist'
				}
				
				tempMapExecuteDetail['StartAt'] = slowLogData['StartAt'].toString()
				tempMapExecuteDetail['QueryTimeLong'] = slowLogData['QueryTimeLong']
				tempMapExecuteDetail['WaitTimeLong'] = slowLogData['WaitTimeLong']
				tempMapExecuteDetail['EndAt'] = slowLogData['EndAt'].toString()
				tempMapExecuteDetail['RowsCnt'] = slowLogData['RowsCnt']
					
				if (tempMapExecuteDetail['StatusStr'] == 'finish') {
					tempMapExecuteDetail['RowsTotalCnt'] = slowLogData['RowsTotalCnt']
				} else {
					tempMapExecuteDetail['RowsTotalCnt'] = null
				}					
				tmpMapDataResult['DetailExecutions'].add(tempMapExecuteDetail)
				listResultData.add(tmpMapDataResult)
		}
	
	}//-- END FOR EACH - slowLogDataList
	println ":: RESULT DATA" + listResultData
	// STEP 7: sort listResultData by LastExecuteTimeLong, QueryTimeLong and get 10 records
	// sort list of map by LastExecuteTimeLong, QueryTimeLong
	def result = []
	if(listResultData.size() > 1) {
		def arrayMap = listResultData.toArray(listResultData)
		Arrays.sort(arrayMap, new Comparator() {
			public int compare(arg0, arg1) {
				def p = arg1
				def n = arg0
				int time_diff = p['LastExecuteTimeLong'] - n['LastExecuteTimeLong']
				if (time_diff == 0) {
					int times_diff = p['QueryCnt'] - n['QueryCnt']
					time_diff = (times_diff < 0 ? -1 : (times_diff == 0 ? 0 : 1))
				}
				return time_diff
			}	
		})
		
		// get number of records follow limit value
		if (limit > 0 && arrayMap.size() > limit) {
	 		result = arrayMap.getAt(0..limit-1)
	 	} else {
	 		result = arrayMap
	 	}
	} else {
 		result = listResultData
 	}
 
 	def returnMap = [:]
 	result.each{data-> 		
 		returnMap[data['SqlHash']] = data
 	}
	return returnMap
}
DBTYPE = "@MARIA"
SENDTYPE = "Gathered"
MONITORINGTYPE = "@DB"
RESOURCEID = "Sq/MariaHighLoad"
DEST = parameters.dest